Dijkstraâ€™s Algorithm
Steps to Write and Execute:
Write the Code:

import heapq

# Dijkstra's Algorithm Implementation
def dijkstra(graph, start):
    priority_queue = [(0, start)]  # (distance, node)
    distances = {start: 0}  # Start node has a distance of 0
    visited = set()

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_node in visited:
            continue

        visited.add(current_node)

        for neighbor, weight in graph[current_node].items():
            if neighbor in visited:
                continue
            new_distance = current_distance + weight

            if new_distance < distances.get(neighbor, float('inf')):
                distances[neighbor] = new_distance
                heapq.heappush(priority_queue, (new_distance, neighbor))

    return distances

# Example graph (adjacency list format)
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Run Dijkstra's algorithm
start_node = 'A'
distances = dijkstra(graph, start_node)
print(f"Shortest distances from node {start_node}: {distances}")

Execute the Code:

Save the code as dijkstra.py.

Open the terminal/command prompt.

Navigate to the directory where the file is saved.

Run the command:

python dijkstra.py

Bellman-Ford Algorithm
Steps to Write and Execute:
Write the Code:

# Bellman-Ford Algorithm Implementation
def bellman_ford(graph, vertices, start):
    distances = {vertex: float('inf') for vertex in vertices}
    distances[start] = 0

    for _ in range(len(vertices) - 1):
        for u in graph:
            for v, weight in graph[u].items():
                if distances[u] + weight < distances[v]:
                    distances[v] = distances[u] + weight

    # Check for negative weight cycles
    for u in graph:
        for v, weight in graph[u].items():
            if distances[u] + weight < distances[v]:
                print("Graph contains negative weight cycle")
                return None

    return distances

# Example graph (adjacency list format)
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

vertices = ['A', 'B', 'C', 'D']

# Run Bellman-Ford Algorithm
start_node = 'A'
distances = bellman_ford(graph, vertices, start_node)
print(f"Shortest distances from node {start_node}: {distances}")

Execute the Code:

Save the code as bellman_ford.py.

Open the terminal/command prompt.

Navigate to the directory where the file is saved.

Run the command:

python bellman_ford.py
